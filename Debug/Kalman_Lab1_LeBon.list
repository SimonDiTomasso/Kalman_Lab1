
Kalman_Lab1_LeBon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000748  08000748  00001748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800075c  0800075c  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  0800075c  0800075c  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800075c  0800075c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800075c  0800075c  0000175c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000760  08000760  00001760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000764  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000770  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000770  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00003ac9  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008b  00000000  00000000  00005b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000282b  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a44  00000000  00000000  000083bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000390  00000000  00000000  00008e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e0e0f  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000275  00000000  00000000  000e9f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000db0  00000000  00000000  000ea214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eafc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c2c  00000000  00000000  000eb008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000730 	.word	0x08000730

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000730 	.word	0x08000730

080001c8 <kalman_update>:
    ; Input:
    # r0 = pointer to KalmanFilter struct
    # s0 = measurement (float)

    # Load KalmanFilter struct values into floating-point registers
    vldr s1, [r0, #0x00]    //#Load q (process noise covariance) into s1
 80001c8:	edd0 0a00 	vldr	s1, [r0]
    vldr s2, [r0, #0x04]    //# Load r (measurement noise covariance) into s2
 80001cc:	ed90 1a01 	vldr	s2, [r0, #4]
    vldr s3, [r0, #0x08]   // # Load x (estimated value) into s3
 80001d0:	edd0 1a02 	vldr	s3, [r0, #8]
    vldr s4, [r0, #0x0C]    //# Load p (estimation error covariance) into s4
 80001d4:	ed90 2a03 	vldr	s4, [r0, #12]

    # p = p + q
    vadd.f32 s4, s4, s1     //# s4 = p + q (update p with process noise covariance)
 80001d8:	ee32 2a20 	vadd.f32	s4, s4, s1

    # k = p / (p + r)
    vadd.f32 s5, s4, s2    // # s5 = p + r
 80001dc:	ee72 2a01 	vadd.f32	s5, s4, s2
    vdiv.f32 s6, s4, s5    // # s6 = k = p / (p + r) (calculate Kalman gain)
 80001e0:	ee82 3a22 	vdiv.f32	s6, s4, s5

    # x = x + k * (measurement - x)
    vsub.f32 s7, s0, s3    // # s7 = measurement - x
 80001e4:	ee70 3a61 	vsub.f32	s7, s0, s3
    vmul.f32 s7, s7, s6    // # s7 = k * (measurement - x)
 80001e8:	ee63 3a83 	vmul.f32	s7, s7, s6
    vadd.f32 s3, s3, s7     //# s3 = x + k * (measurement - x) (update estimate)
 80001ec:	ee71 1aa3 	vadd.f32	s3, s3, s7

    # p = (1 - k) * p
    vmov.f32 s7, #1.0      // # s7 = 1.0
 80001f0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
    vsub.f32 s7, s7, s6    // # s7 = 1 - k
 80001f4:	ee73 3ac3 	vsub.f32	s7, s7, s6
    vmul.f32 s4, s4, s7    // # s4 = (1 - k) * p (update error covariance)
 80001f8:	ee22 2a23 	vmul.f32	s4, s4, s7

    # Store the updated values back into the KalmanFilter struct
    vstr s3, [r0, #0x08]    //# Store updated x
 80001fc:	edc0 1a02 	vstr	s3, [r0, #8]
    vstr s4, [r0, #0x0C]   // # Store updated p
 8000200:	ed80 2a03 	vstr	s4, [r0, #12]

    bx lr                 //   # Return from function
 8000204:	4770      	bx	lr

08000206 <kalmanInit>:
  * @brief  The application entry point.
  * @retval int
  */


void kalmanInit(KalmanFilter *KalmanFilter, float q, float r, float x, float p, float k){
 8000206:	b480      	push	{r7}
 8000208:	b087      	sub	sp, #28
 800020a:	af00      	add	r7, sp, #0
 800020c:	6178      	str	r0, [r7, #20]
 800020e:	ed87 0a04 	vstr	s0, [r7, #16]
 8000212:	edc7 0a03 	vstr	s1, [r7, #12]
 8000216:	ed87 1a02 	vstr	s2, [r7, #8]
 800021a:	edc7 1a01 	vstr	s3, [r7, #4]
 800021e:	ed87 2a00 	vstr	s4, [r7]
	  KalmanFilter->q = q;
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	601a      	str	r2, [r3, #0]
	  KalmanFilter->r = r;
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	605a      	str	r2, [r3, #4]
	  KalmanFilter->x = x;
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	609a      	str	r2, [r3, #8]
	  KalmanFilter->p = p;
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	60da      	str	r2, [r3, #12]
	  KalmanFilter->k = k;
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	683a      	ldr	r2, [r7, #0]
 800023e:	611a      	str	r2, [r3, #16]

}
 8000240:	bf00      	nop
 8000242:	371c      	adds	r7, #28
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <kalmanInit_CMSIS>:
void kalmanInit_CMSIS(KalmanFilter_CMSIS *KalmanFilter, float32_t q, float32_t r, float32_t x, float32_t p, float32_t k){
 800024c:	b480      	push	{r7}
 800024e:	b087      	sub	sp, #28
 8000250:	af00      	add	r7, sp, #0
 8000252:	6178      	str	r0, [r7, #20]
 8000254:	ed87 0a04 	vstr	s0, [r7, #16]
 8000258:	edc7 0a03 	vstr	s1, [r7, #12]
 800025c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000260:	edc7 1a01 	vstr	s3, [r7, #4]
 8000264:	ed87 2a00 	vstr	s4, [r7]
	  KalmanFilter->q = q;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	693a      	ldr	r2, [r7, #16]
 800026c:	601a      	str	r2, [r3, #0]
	  KalmanFilter->r = r;
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	605a      	str	r2, [r3, #4]
	  KalmanFilter->x = x;
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	609a      	str	r2, [r3, #8]
	  KalmanFilter->p = p;
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	60da      	str	r2, [r3, #12]
	  KalmanFilter->k = k;
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	611a      	str	r2, [r3, #16]

}
 8000286:	bf00      	nop
 8000288:	371c      	adds	r7, #28
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
	...

08000294 <main>:


int main(void){
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b090      	sub	sp, #64	@ 0x40
 8000298:	af00      	add	r7, sp, #0
	
	KalmanFilter kf;
	KalmanFilter_CMSIS kf_CMSIS;
  /* USER CODE BEGIN 1 */
	kalmanInit(&kf, 0.1, 0.1, 5.0, 0.1, 0.0);
 800029a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800029e:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 8000320 <main+0x8c>
 80002a2:	eddf 1a20 	vldr	s3, [pc, #128]	@ 8000324 <main+0x90>
 80002a6:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80002aa:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8000324 <main+0x90>
 80002ae:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000324 <main+0x90>
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ffa7 	bl	8000206 <kalmanInit>
	kalmanInit_CMSIS(&kf_CMSIS, 0.1f, 0.1f, 5.0f, 0.1f, 0.0f);
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 8000320 <main+0x8c>
 80002c0:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8000324 <main+0x90>
 80002c4:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80002c8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8000324 <main+0x90>
 80002cc:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000324 <main+0x90>
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffbb 	bl	800024c <kalmanInit_CMSIS>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 f8b8 	bl	800044a <HAL_Init>
	  // call kalman assembly function
	  // r0 = pointer to KalmanFilter struct
	  //s0 = measurement (float)


  	float meas[5] = {0.0, 1.0, 2.0, 3.0, 4.0};
 80002da:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <main+0x94>)
 80002dc:	463c      	mov	r4, r7
 80002de:	461d      	mov	r5, r3
 80002e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e4:	682b      	ldr	r3, [r5, #0]
 80002e6:	6023      	str	r3, [r4, #0]




	 for(int i = 0; i < 5; i++) {
 80002e8:	2300      	movs	r3, #0
 80002ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80002ec:	e010      	b.n	8000310 <main+0x7c>
		  kalman_update(&kf, meas[i]);
 80002ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	3340      	adds	r3, #64	@ 0x40
 80002f4:	443b      	add	r3, r7
 80002f6:	3b40      	subs	r3, #64	@ 0x40
 80002f8:	edd3 7a00 	vldr	s15, [r3]
 80002fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000300:	eeb0 0a67 	vmov.f32	s0, s15
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff5f 	bl	80001c8 <kalman_update>
	 for(int i = 0; i < 5; i++) {
 800030a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800030c:	3301      	adds	r3, #1
 800030e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000312:	2b04      	cmp	r3, #4
 8000314:	ddeb      	ble.n	80002ee <main+0x5a>
	 }
	 return 0;
 8000316:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000318:	4618      	mov	r0, r3
 800031a:	3740      	adds	r7, #64	@ 0x40
 800031c:	46bd      	mov	sp, r7
 800031e:	bdb0      	pop	{r4, r5, r7, pc}
 8000320:	00000000 	.word	0x00000000
 8000324:	3dcccccd 	.word	0x3dcccccd
 8000328:	08000748 	.word	0x08000748

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <HAL_MspInit+0x44>)
 8000334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000336:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <HAL_MspInit+0x44>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6613      	str	r3, [r2, #96]	@ 0x60
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <HAL_MspInit+0x44>)
 8000340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <HAL_MspInit+0x44>)
 800034c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800034e:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <HAL_MspInit+0x44>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000354:	6593      	str	r3, [r2, #88]	@ 0x58
 8000356:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <HAL_MspInit+0x44>)
 8000358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800035a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <NMI_Handler+0x4>

0800037c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <HardFault_Handler+0x4>

08000384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <MemManage_Handler+0x4>

0800038c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <UsageFault_Handler+0x4>

0800039c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ca:	f000 f893 	bl	80004f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <SystemInit+0x20>)
 80003da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <SystemInit+0x20>)
 80003e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003fc:	f7ff ffea 	bl	80003d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	@ (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	@ (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	@ (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	@ (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000426:	f000 f95f 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800042a:	f7ff ff33 	bl	8000294 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800043c:	08000764 	.word	0x08000764
  ldr r2, =_sbss
 8000440:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000444:	2000002c 	.word	0x2000002c

08000448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC1_2_IRQHandler>

0800044a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000450:	2300      	movs	r3, #0
 8000452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 f913 	bl	8000680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f80e 	bl	800047c <HAL_InitTick>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	e001      	b.n	8000470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800046c:	f7ff ff5e 	bl	800032c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000470:	79fb      	ldrb	r3, [r7, #7]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <HAL_InitTick+0x6c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d023      	beq.n	80004d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <HAL_InitTick+0x70>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <HAL_InitTick+0x6c>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800049e:	fbb3 f3f1 	udiv	r3, r3, r1
 80004a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f911 	bl	80006ce <HAL_SYSTICK_Config>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10f      	bne.n	80004d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d809      	bhi.n	80004cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b8:	2200      	movs	r2, #0
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	f04f 30ff 	mov.w	r0, #4294967295
 80004c0:	f000 f8e9 	bl	8000696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004c4:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <HAL_InitTick+0x74>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6013      	str	r3, [r2, #0]
 80004ca:	e007      	b.n	80004dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	e004      	b.n	80004dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e001      	b.n	80004dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004d8:	2301      	movs	r3, #1
 80004da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000008 	.word	0x20000008
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000004 	.word	0x20000004

080004f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <HAL_IncTick+0x20>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <HAL_IncTick+0x24>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4413      	add	r3, r2
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <HAL_IncTick+0x24>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000008 	.word	0x20000008
 8000518:	20000028 	.word	0x20000028

0800051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054e:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	@ (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	@ (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	@ 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800064c:	d301      	bcc.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e00f      	b.n	8000672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <SysTick_Config+0x40>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	210f      	movs	r1, #15
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f7ff ff8e 	bl	8000580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <SysTick_Config+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <SysTick_Config+0x40>)
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010

08000680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff47 	bl	800051c <__NVIC_SetPriorityGrouping>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006a8:	f7ff ff5c 	bl	8000564 <__NVIC_GetPriorityGrouping>
 80006ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	6978      	ldr	r0, [r7, #20]
 80006b4:	f7ff ff8e 	bl	80005d4 <NVIC_EncodePriority>
 80006b8:	4602      	mov	r2, r0
 80006ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff5d 	bl	8000580 <__NVIC_SetPriority>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb0 	bl	800063c <SysTick_Config>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	@ (800072c <__libc_init_array+0x44>)
 80006fc:	f000 f818 	bl	8000730 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	0800075c 	.word	0x0800075c
 8000724:	0800075c 	.word	0x0800075c
 8000728:	0800075c 	.word	0x0800075c
 800072c:	08000760 	.word	0x08000760

08000730 <_init>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr

0800073c <_fini>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr
